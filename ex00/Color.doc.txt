
<- Color ----------------------------------------------------------------------
The Color class handles RGB colors.

An instance can be contructed from either a RGB value:
    new Color([ 'rgb' => 12345 ]);

Or from distinct red, green, blue components:
    new Color([ 'red' => 255, 'green' => 255, 'blue' => 255 ]);

Or no arguments at all (black):
    new Color();

Verbose output may also be enabled in two ways
(Order does not matter for the second method):
    Color::$verbose = TRUE;
    new Color([ 'verbose' => TRUE ]);

Red, green, blue components and RGB values are converted to intergers.
Valid input must be in the range: 0 <= color <= 255
Invalid input will be truncated to one byte by a binary mask.
    new Color ([ 'red' => -1 ]);
    red == (-1 & 0xFF) == 255

If both, RGB and individual color components are specified,
    the full RGB value will be applied first,
    then the individual color components are applied, replacing the RGB.

The class provides the following methods:

Color   add( Color $rhs );
Sums each color component.

Color   sub( Color $rhs );
Substracts each color component.

Color   mult( $f );
Multiplies each color component by factor $f.

The result of math functions is GUARANTEED to be within valid range,
without overflow or underflow, and return a new instance.
---------------------------------------------------------------------- Color ->
